#!/usr/bin/env python

import httplib, mimetools, re, svn.core, svn.fs, svn.repos, sys, urllib, urlparse
from lxml.etree import ElementTree, HTMLParser
from lxml.cssselect import CSSSelector

# Create HTTP connection from URL scheme, host, and port
def http_connection(url):
  components = list(urlparse.urlparse(url))

  if 'https' == components[0]:
    return httplib.HTTPSConnection(components[1])

  return httplib.HTTPConnection(components[1])

# Depending on the method, add params to the URL or the request body and set
# any headers.  An HTTP request object would be nice here, but need to remember
# this is just a quick script to close Google project hosting issues : )
def encode_params(method, url, params):
  body = None
  headers = {}

  if 'POST' == method.upper():
    headers['Content-Type'] = 'application/x-www-form-urlencoded'
    body = urllib.urlencode(params)

  else:
    components = list(urlparse.urlparse(url))
    components[4] = urllib.urlencode(params)
    url = urlparse.urlunparse(components)

  return url, headers, body

def encode_form(method, url, params, form):
  url = urlparse.urljoin(url, form.get('action'))

  url, headers, body = encode_params(method, url, params)

  # Encode multipart/form-data
  if 'multipart/form-data' == form.get('enctype'):
    boundary = mimetools.choose_boundary()

    headers['Content-Type'] = 'multipart/form-data; boundary=' + boundary

    components = []
    for name, value in params:
      components.append('--' + boundary)
      components.append('Content-Disposition: form-data; name="' + name + '"')
      components.append('')
      components.append(value)

    components.append('--' + boundary + '--')

    body = '\r\n'.join(components)

  return url, headers, body

# Check arguments and print usage
if 6 != len(sys.argv):
  print """
%s requires five arguments,

  [1] REPOS-PATH   (the path to the repository)
  [2] REV          (the number of the revision)
  [3] EMAIL        (the Google account email)
  [4] PASSWORD     (the Google account password)
  [5] PROJECT      (the Google project hosting project)
""" % sys.argv[0]

  sys.exit(1)

# Open Subversion repository
repos = svn.repos.open(sys.argv[1])
fs = svn.repos.fs(repos)

# Get commit log
log = svn.fs.revision_prop(fs, int(sys.argv[2]), svn.core.SVN_PROP_REVISION_LOG)

# Find magic words in commit log, e.g.
#
# * Closes issue 123
# * Fixes issue 123
# * Closes issues 123 and 321
# * Closes issue 123 and 321
# NOT Closes issues 123
# * Closes issues 123, 321, and 456
# * Closes issues 123, 321 and 456
# * Closes issue 123 and issue 321
# NOT Closes issues 123 and issue 321
# TODO Closes issues 123, 321, and issue 456
#
matches = re.findall('(?:closes|fixes)\\s+issue(?:s?\\s+#?\\d+(?:,?\\s+(?:(?:&|and)\\s+)?#?\\d+)+|\\s+#?\\d+(?:,?\\s+(?:(?:&|and)\\s+)?issue\s+#?\\d+)*)', log, re.I)

if matches:

  # Login to Google account
  method = 'GET'
  url = 'https://www.google.com/accounts/LoginAuth'

  conn = http_connection(url)

  conn.request(method, url)
  response = conn.getresponse()

  # Get cookie
  cookie = response.getheader('Set-Cookie')

  parser = HTMLParser()
  tree = ElementTree()

  tree.parse(response, parser)

  sel = CSSSelector('#gaia_loginform')
  form = sel(tree)[0]

  # Submit #gaia_loginform
  if form.get('method'):
    method = form.get('method')

  params = []

  # Get params from form inputs.  Override email and password.
  sel = CSSSelector('input, textarea')
  for input in sel(form):
    if 'Email' == input.get('name'):
      params.append(('Email', sys.argv[3]))

    elif 'Passwd' == input.get('name'):
      params.append(('Passwd', sys.argv[4]))

    else:
      params.append((input.get('name'), input.get('value')))

  url, headers, body = encode_form(method, url, params, form)

  headers['Cookie'] = cookie

  conn.request(method, url, body, headers)
  response = conn.getresponse()

  # Close Google project hosting issues
  url = 'http://code.google.com/p/' + sys.argv[5] + '/issues/detail'

  # Close issues with one connection.  Add headers to make it persistent?
  conn = http_connection(url)

  for match in matches:
    for match in re.findall('\\d+', match, re.I):

      # Get #makechages form
      method = 'GET'
      url = 'http://code.google.com/p/' + sys.argv[5] + '/issues/detail'
      params = [('id', match)]

      url, headers, body = encode_params(method, url, params)

      headers['Cookie'] = cookie

      conn.request(method, url, body, headers)
      response = conn.getresponse()

      tree.parse(response, parser)

      sel = CSSSelector('#makechanges form')
      form = sel(tree)[0]

      # Submit #makechanges form
      if form.get('method'):
        method = form.get('method')

      params = []

      # Get params from form inputs.  Override comment and status.
      sel = CSSSelector('input, textarea')
      for input in sel(form):
        if 'comment' == input.get('name'):
          params.append(('comment', 'Fixed in revision ' + sys.argv[2]))

        elif 'status' == input.get('name'):
          params.append(('status', 'Fixed'))

        else:
          params.append((input.get('name'), input.get('value')))

      url, headers, body = encode_form(method, url, params, form)

      headers['Cookie'] = cookie

      # Close issue
      conn.request(method, url, body, headers)

      # Note that you must have read the whole response before you can send a
      # new request to the server.  Actually, you must call getresponse()
      # before you can send a new request to the server and you must have read
      # the whole response before you can call getresponse() again : P
      conn.getresponse().read()

      print 'Closed issue ' + match + '.'
